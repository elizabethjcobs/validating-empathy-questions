---
title: "Empathy Questionnaire Simulations"
output: html_document
date: "`r Sys.Date()`"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(faux)
library(psych)
library(broom)
library(psychTools)
library(cluster)
library(corrplot)

#install.packages("corrplot")

# nicer ggplot defaults
theme_set(theme_minimal(base_size = 12))
```

## Read in test data

Get the format of the data to be collected from some test runs.

```{r}
# get data
orig <- read_csv("Trait-Empathy-Questionnaires-quests_2024-02-12.csv", show_col_types = FALSE) 

testdat <- orig |>
  filter(user_status == "guest") |>
  # glitch had 2 people repeat PPB1 
  group_by(user_id, q_id) |>
  arrange(endtime) |>
  filter(row_number() == 1) |>
  ungroup() |>
  # fix q 92860957 name
  mutate(q_name = ifelse(q_id == 92860957, "IRI_26_FS", q_name)) |>
  select(session_id, quest_name, q_name, dv) |>
  separate(q_name, 
           into = c("quest", "q_n", "subscale"), 
           convert = TRUE, 
           fill = "right", ) |>
  # convert NA subscales to an empty string
  mutate(subscale = ifelse(is.na(subscale), "", subscale))


```




## Convert DVs to numbers

```{r}
qscoring <-list(
  "SCBQ" = setNames(1:7, 1:7),
  "CLHS" = c("Not at all true of me" = 1, 
             "2" = 2, "3" = 3, "4" = 4, "5" = 5, "6" = 6, 
             "Very true of me" = 7),
  "QCAE" = c("Strongly Disagree" = 1, 
             "Slightly Disagree" = 2, 
             "Slightly Agree" = 3, 
             "Strongly Agree" = 4),
  "TEQ" = c("0 Never" = 0, 
            "1 Rarely" = 1, 
            "2 Sometimes" = 2, 
            "3 Often" = 3, 
            "4 Always" =4),
  "RCS" = c("Disagree Strongly" = 1,
            "Disagree Somewhat" = 2,
            "Agree Somewhat" = 3, 
            "Agree Strongly" = 4),
  "PPB" = c(
    "Strongly Disagree" = 1,
    "Disagree" = 2,
    "Uncertain" = 3,
    "Agree" = 4,
    "Strongly Agree" = 5,
    "Never" = 1,
    "Once" = 2,
    "More than Once" = 3,
    "Often" = 4,
    "Very Often" = 5), 
  "IRI" = c("Does not describe me well" = 0,
            "B" = 1, "C" = 2, "D" = 3, 
            "Describes me very well" = 4),
  "EQ" = c("Strongly Disagree" = 4, 
           "Slightly Disagree" = 3, 
           "Slightly Agree" = 2, 
           "Strongly Agree" = 1),
  "MDEES" = c("Strongly Disagree" = 1, 
              "Slightly Disagree" = 2, 
              "Neutral" = 3,
              "Slightly Agree" = 4, 
              "Strongly Agree" = 5),
  "EETS" = setNames(-4:4, -4:4)
)

# get DV values for scales from test data 
# testdat |> filter(quest == "SCBQ") |>
#   arrange(dv) |> pull(dv) |> unique() |> dput()
```



```{r}
numdat <- testdat |>
  rowwise() |>
  mutate(dv_num = qscoring[[quest]][dv])

# check that all NULL or NA values are actually missing dv and not bad coding
filter(numdat, is.na(dv_num) | is.null(dv_num))
```


### MDEES Scoring Code

Reverse-scored items were recorded reversed, so they don't need reversed in the code below.

Add all the scores for the Total score and divide by 30. 

Add the following items together for each scale, and divide by the number of items: 

 * Suffering (3, 5, 6, 8, 12, 18, 24, 28); 
 * Positive Sharing (14, 22, 23, 29, 30);
 * Responsive Crying (1, 20, 25); 
 * Emotional Attention (4, 9, 13, 27); 
 * Feel for Others (10, 15, 16, 21); 
 * Emotional Contagion (11, 17). 
 
Take the mean of these sub-scales to compute a General Empathy scale. 
Citation: The Multidimesional Emotional Empathy Scale (Caruso & Mayer, 1998)

Note: Duplication of subscale "MDEES_s" and "MDEES_ES" has now been combined into one subscale

```{r}
mdees_subscales <- numdat %>%
  filter(quest == "MDEES") %>%
  filter(subscale != "") %>%
  group_by(session_id, quest, subscale) %>%
  summarize(
    score = mean(dv_num),
    .groups = "drop"
  )

# calculate general empathy score
mdees_ge <- mdees_subscales %>%
  group_by(session_id, quest) %>%
  summarise(score = mean(score),
            .groups = "drop") %>%
  mutate(subscale = "GE")

# calculate total empathy score
mdees_total <- numdat %>%
  filter(quest == "MDEES") %>%
  group_by(session_id, quest) %>%
  summarize(
    score = mean(dv_num),
    .groups = "drop"
  ) %>%
  mutate(subscale = "TOTAL")

# add to mdees_data
mdees_data <- mdees_subscales %>%
  bind_rows(mdees_total) %>%
  bind_rows(mdees_ge)

ggplot(mdees_data, aes(x = score)) +
  geom_histogram(bins = 20, fill = "white", color = "black") +
  facet_wrap(~subscale, nrow = 2) +
  xlab("MDEES")
```


### CLHS scoring

Scoring : An average score is calculated for all 21 items. Scoring is kept continuous.
Citation : Sprecher, S. & Fehr, B. (2005). Compassionate love for close others and humanity. Journal of Social and Personal Relationships, 22, 629-651. 

```{r}
clhs_data <- numdat %>%
  filter(quest == "CLHS") %>%
  group_by(session_id, quest, subscale) %>%
  summarize(
    score = mean(dv_num),
    .groups = "drop"
  )

ggplot(clhs_data, aes(x = score)) +
  geom_histogram(bins = 21, fill = "white", color = "black") +
  xlab("CLHS")
```

### IRI Scoring Code

It uses a 5-item Likert scale with two anchors (A = Does not describe me well; E= Describes me very well) using 0 to 4 endpoints. Subscale scores are summed. These subscales should be used separately since the instrument is not intended to measure global empathy.

Citation: Davis, M. H. (1980). A multidimensional approach to individual differences in empathy. 
JSAS Catalog of Selected Documents in Psychology, 10, 85.
```{r}
##IRI : subscale additions
# Sum up scores for each subscale

iri_data <- numdat %>%
  filter(quest == "IRI") %>%
  group_by(session_id, quest, subscale) %>%
  summarize(
    score = sum(dv_num),
    .groups = "drop"
  )

ggplot(iri_data, aes(x = score)) +
  geom_histogram(binwidth = 1, fill = "white", color = "black") +
  facet_wrap(~subscale) +
  xlab("IRI")
```

### RCS Scoring Code

Not reverse-coded in the experiment, so need to reverse code below.

* SS: 4, 12, 13 (self to self compassion)
* OS: 9, 10, 15, 16  (other to self compassion)
* SO: 3, 5, -8, -11, 14 (self to other compassion)
* OO: 1, -2, -6, -7 (other to other compassion)

	
Citation: Hacker, T. (2008). The relational compassion scale: Development and validation of a new self rated scale for the assessment of self-other compassion (Doctoral dissertation). University of Glasgow
```{r}
##RCS : continuous scoring 1-4
# Calculate the average for questions 1 to 4 for RCS
rcs_data <- numdat %>%
  filter(quest == "RCS") %>%
  # reverse code some Qs
  mutate(dv_num = ifelse(q_n %in% c(8, 11, 2, 6, 7), 5 - dv_num, dv_num)) |>
  # add subscales 
  mutate(subscale = case_when(
    q_n %in% c(4, 12, 13) ~ "SS",
    q_n %in% c(9, 10, 15, 16) ~ "OS",
    q_n %in% c(3, 5, 8, 11, 14) ~ "SO",
    q_n %in% c(1, 2, 6, 7) ~ "OO",
    TRUE ~ NA
  )) %>%
  group_by(session_id, quest, subscale) %>%
  summarize(
    score = mean(dv_num),
    .groups = "drop"
  )

ggplot(rcs_data, aes(x = score)) +
  geom_histogram(bins = 20, fill = "white", color = "black") +
  facet_wrap(~subscale) +
  xlab("RCS")

```
### SCBQ Scoring Code

The SCBCS contains five items on a 7-point Likert scale which correspond to the intensity with which the respondent experiences compassion (from 1 – not at all true for me, to 7 - very true for me). All items are formulated positively. High scores indicate a higher degree of compassion.

Citation : Hwang, Jeong Yeon & Plante, Thomas & Lackey, Katy. (2008). The Development of the Santa Clara Brief Compassion Scale: An Abbreviation of Sprecher and Fehr’s Compassionate Love Scale. Pastoral Psychology. 56. 421-428. 10.1007/s11089-008-0117-2.

```{r}
##SCBQ : continous scoring
# Sum the responses continuously for each participant
scbq_data <- numdat %>%
  filter(quest == "SCBQ") %>%
  group_by(session_id, quest, subscale) %>%
  summarize(
    score = sum(dv_num),
    .groups = "drop"
  )

ggplot(scbq_data, aes(x = score)) +
  geom_histogram(bins = 20, fill = "white", color = "black") +
  xlab("SCBQ")
```

### TEQ Scoring Code

Scale 0-4, Questions 2, 4, 7, 10, 11, 12, 14, and 15 need to be reverse-coded below.

Add each item results to find determine your score:
Higher scores indicate high levels of self-reported empathy while scores 
below 45 are indicative of below average empathy levels

(Some materials say to divide by 4, but this doesn't make sense with the original paper's means and SDs.)
	
Citation: Spreng RN, McKinnon MC, Mar RA, Levine B. The Toronto Empathy Questionnaire: scale development and initial validation of a factor-analytic solution to multiple empathy measures. J Pers Assess. 2009 Jan;91(1):62-71. doi: 10.1080/00223890802484381. PMID: 19085285; PMCID: PMC2775495.

```{r}
teq_data <- numdat %>%
  filter(quest == "TEQ") %>%
  # reverse code some Qs
  mutate(dv_num = ifelse(q_n %in% c(2, 4, 7, 10, 11, 12, 14, 15), 4 - dv_num, dv_num)) |>
  group_by(session_id, quest, subscale) %>%
  summarize(
    score = sum(dv_num),
    .groups = "drop"
  )

ggplot(teq_data, aes(x = score)) +
  geom_histogram(bins = 20, fill = "white", color = "black") +
  xlab("TEQ")
```

### EETS Scoring Code

Likert scale -4 (very strong disagreement) to 4 (very strong agreement), reverse-coded items are reversed in the questionnaire, so don't need to be reversed below. 

The EETS yields 1 total score. Scale scores are calculated as the sum of respective items, ranging from -132 to +132. 

Citation: Mehrabian, A. & Epstein, N. (1972). A measure of emotional empathy. Journal of Personality, 40, 525-543.

```{r}
## EETS : continous scoring
# Sum the responses continuously for each participant
eets_data <- numdat %>%
  filter(quest == "EETS") %>%
  group_by(session_id, quest, subscale) %>%
  summarize(
    score = sum(dv_num),
    .groups = "drop"
  )

ggplot(eets_data, aes(x = score)) +
  geom_histogram(binwidth = 4, fill = "white", color = "black") +
  xlab("EETS")

```
### PPB Scoring Code

Compute scores for 7 individual scales, coded 1-5 (reverse-coded items reversed in questionnaire, so don't need reversed below): 

* Social Responsibility (SR) 
* Empathic Concern (EC) 
* Perspective Taking (PT) 
* Personal Distress (PD) 
* Other-Oriented Moral Reasoning (O) 
* Mutual Concerns moral reasoning (M) 
* Self-reported altruism (SRA) 

Create 2 factors: Subtract the total score on PD from 18. This makes the meaning of a high score on the Helpfulness factor clearer, because now high scores on the two scales both represent prosocial tendencies.

* Factor 1, Other-oriented empathy, = sum of scores on SR, EC, PT, O, M. 
* Factor 2, Helpfulness, = sum of PD (total reversed*) and SRA. 

Citation:  Penner, L. A., Fritzsche, B. A., Craiger, J. P., & Freifeld, T. S. (1995). Measuring the prosocial personality. In J. N. Butcher, & C. D. Spielberger (Eds.) Advances in personality assessment, (Vol. 12). Hillsdale, NJ: Erlbaum.  / (Suggested Citation : Penner, L. A. (2002) The Causes of Sustained Volunteerism : An Interactionist Perspective. Journal of Social Issues, 58, 447-468.

```{r}
# Define the selected subscales
sum_factor1 <- c("SR", "EC", "O", "M")
sum_factor2 <- c("PD", "SRA")

# Calculate the total DV score for each participant and each subscale
ppb_subscales <- numdat %>%
  filter(quest == "PPB") %>%
  group_by(session_id, quest, subscale) %>%
  summarize(score = sum(dv_num),
            .groups = "drop")# Adjust the division factor if needed

# Calculate the total DV score for each participant and each factor subscale
ppb_factors <- ppb_subscales %>%
  mutate(score = ifelse(subscale == "PD", 18 - score, score)) %>%
  mutate(subscale = ifelse(subscale %in% sum_factor1, "F1", "F2")) %>%
  group_by(session_id, quest, subscale) %>%
  summarize(score = sum(score),
            .groups = "drop")

ppb_data <- bind_rows(ppb_subscales, ppb_factors)

ggplot(ppb_data, aes(x = score)) +
  geom_histogram(binwidth = 4, fill = "white", color = "black") +
  facet_wrap(~subscale) +
  xlab("PPB")
```

### EQ Scoring Code

Scoring: Responses that score 1 or 2 points are marked. Other responses score 0. For total score, sum all items.

Citation: S. Baron-Cohen and S. Wheelwright, (2004). The Empathy Quotient (EQ). An investigation of adults with Asperger Syndrome or High Functioning Autism, and normal sex differences. Journal of Autism and Developmental Disorders 34:163-175

```{r}
# three patterns of scoring for strongly agree = 2, strongly disagree = 2 or neutral
a <- c(2, 1, 0, 0)
d <- c(0, 0, 1, 2)
n <- c(0, 0, 0, 0)

# which questions follow which pattern
a_qs <- c(1, 6, 19, 22, 25, 26, 35, 36, 37, 38, 41, 
          42, 43, 44, 52, 54, 55, 57, 58, 59, 60)
d_qs <- c(4, 8, 10, 11, 12, 14, 15, 18, 21, 27, 28, 
          29, 32, 34, 39, 46, 48, 49, 50)
n_qs <- c(2, 3, 5, 7, 9, 13, 16, 17, 20, 23, 
          24, 30, 31, 33, 40, 45, 47, 51, 53, 56)

# set up 
eq_scoring_table <- matrix(nrow = 4, ncol = 60) 
eq_scoring_table[, a_qs] <- a
eq_scoring_table[, d_qs] <- d
eq_scoring_table[, n_qs] <- n

# Filter rows with the questionnaire "EQ"
eq_data <- numdat %>%
  filter(quest == "EQ") %>% 
  rowwise() %>%
  mutate(dv_coded = eq_scoring_table[dv_num, q_n]) %>%
  group_by(session_id, quest, subscale) %>%
  summarise(score = mean(dv_coded),
            .groups = "drop")

ggplot(eq_data, aes(x = score)) +
  geom_histogram(bins = 20, fill = "white", color = "black") +
  xlab("EQ")

```
### QCAE Scoring Code

Scored 1 (Strongly Disagree) to 4 (Strongly Agree); reverse-coded items reversed in questionnaire (not below).

* Cognitive empathy (average of items in Perspective taking and Online simulation subscales)
  * Perspective taking (average of items: 15, 16, 19, 20, 21, 22, 24, 25, 26, 27)
  * Online simulation (average of items: 1 (r), 3, 4, 5, 6, 18, 28, 30, 31)

* Affective empathy (average of items in Emotion contagion, Proximal responsivity and Peripheral responsivity subscale)
  * Emotion contagion (average of items: 8, 9, 13, 14)
  * Proximal responsivity (average of items: 7, 10, 12, 23)
  * Peripheral responsivity (average of items: 2 (r), 11, 17 (r), 29 (r))
  
	
Citation: Reniers, R. L., Corcoran, R., Drake, R., Shryane, N. M., & Völlm, B. A. (2011). The QCAE: A questionnaire of cognitive and affective empathy. Journal of personality assessment, 93(1), 84-95.
  
```{r}
# Sum up scores for each subscale
qcae_subscales <- numdat %>%
  filter(quest == "QCAE") %>%
  mutate(subscale = case_when(
    q_n %in% c(15, 16, 19, 20, 21, 22, 24, 25, 26, 27) ~ "PT",
    q_n %in% c(1, 3, 4, 5, 6, 18, 28, 30, 31) ~ "OS",
    q_n %in% c(8, 9, 13, 14) ~ "EC",
    q_n %in% c(7, 10, 12, 23) ~ "PrR",
    q_n %in% c(2, 11, 17, 29) ~ "PeR",
  )) %>%
  group_by(session_id, quest, subscale) %>%
  summarize(score = mean(dv_num),
            .groups = "drop")
  
qcae_factors <- qcae_subscales %>%
  mutate(subscale = case_when(
    subscale %in% c("PT", "OS") ~ "CE",
    subscale %in% c("EC", "PrR", "PeR") ~ "AE",
  )) %>%
  group_by(session_id, quest, subscale) %>%
  summarize(score = mean(score),
            .groups = "drop")

qcae_data <- bind_rows(qcae_subscales, qcae_factors)

ggplot(qcae_data, aes(x = score)) +
  geom_histogram(bins = 20, fill = "white", color = "black") +
  facet_wrap(~subscale) +
  xlab("QCAE")
```


### New scored testdat

```{r}
# Combine the tables for different questionnaires
combined_table <- bind_rows(
  mdees_data,
  clhs_data,
  iri_data,
  rcs_data,
  scbq_data,
  teq_data,
  eets_data,
  qcae_data,
  eq_data,
  ppb_data
)
```

## Correlation matrix

```{r}
# label categories
ge <- c("MDEES_GE", "MDEES_TOTAL")

ae <- c("CLHS_", "EETS_", "IRI_EC", "IRI_PD", 
        "MDEES_EC", "MDEES_FFS", "MDEES_PS", "MDEES_RC", "MDEES_S", 
        "PPB_EC", "PPB_F1", "PPB_F2", "PPB_M", 
        "PPB_O", "PPB_PD", "PPB_PT", "PPB_SR", "PPB_SRA", 
        "QCAE_AE", "QCAE_EC", "QCAE_PeR", "QCAE_PrR", 
        "SCBQ_","TEQ_")

ce <- c("EQ_", "IRI_FS", "IRI_PT", "MDEES_EA", 
        "QCAE_CE", "QCAE_OS", "QCAE_PT", 
        "RCS_OO", "RCS_OS", "RCS_SO", "RCS_SS")

cat_table <- data.frame(
  v = c(ge, ae, ce),
  cat = rep(c("GE", "AE", "CE"), c(length(ge), length(ae), length(ce)))
)
```

```{r}
# Create a correlation matrix from the data
cor_matrix <- combined_table %>% 
  unite(col = "name", quest, subscale) %>%
  pivot_wider(names_from = name, values_from = score) %>%
  select(-session_id) %>%
  #na.omit() %>%
  cor(use = "pairwise.complete.obs")

corr_table <- cor_matrix %>%
  as_tibble(rownames = "v1") %>%
  pivot_longer(-v1, names_to = "v2", values_to = "r") %>%
  left_join(cat_table, by = c("v1" = "v")) %>%
  rename(cat1 = cat) %>%
  left_join(cat_table, by = c("v2" = "v")) %>%
  rename(cat2 = cat) %>%
  unite(v1, cat1, v1, remove = FALSE) %>%
  unite(v2, cat2, v2, remove = FALSE)
```


## Data Analysis


### Corr table

```{r, fig.width = 9, fig.height = 8}
ggplot(corr_table, aes(x=v1, y=v2, fill=r)) + 
  geom_tile() +
  scale_fill_gradient2(low = "cyan3", high = "blueviolet") +
  scale_x_discrete(limits=rev, position = "top") +
  labs(x = NULL, y = NULL) +
  theme(axis.text.x.top = element_text(angle = 45, hjust = 0))
```


```{r, fig.width = 9, fig.height = 8}
# Without RCS
corr_norcs <- corr_table |>
  filter(!grepl("RCS", v1) & !grepl("RCS", v2))

corr_norcs |>
  ggplot(aes(x=v1, y=v2, fill=r)) + 
  geom_tile() +
  scale_fill_gradient2(low = "cyan3", high = "blueviolet") +
  scale_x_discrete(limits=rev, position = "top") +
  labs(x = NULL, y = NULL) +
  theme(axis.text.x.top = element_text(angle = 45, hjust = 0))

```
Based on this analysis, 
*QCAE CE is negatively correlated with QCAE AE. QCAE subscales seems best correlated with relevant CE/AE scales and negatively correlated with the opposite (AE negative correlation with PPB_F2 but positive w PPB_F1, also no correlation with CE_IRI_PT which makes sense). Similarly, CE_QCAE is correlated with CE, sans some AE_subscales
*RCS is measuring something else entirely. 
*MDEES seems too general. MDEES AE correlates with CE_EQ, AE_TEQ, AE_SCBQ (two diff types of empathy). AE_MDEES correlates with PPB. GE_MDEES correlates with AE_MDEES
*PPB F2 seems to be negatively correlated with most things.
* AE_EETS, AE_CLHS is correlated positively with AE_MDEES, PPB1 but not 2

** Cognitive measures correlate as well with the affective measures, nothing distinctive -> MDEES & General empathy measures


### Category Correlations

```{r}
corr_match <- corr_norcs |>
  filter(v1 != v2, v1 < v2) |> # keep only unique pairs
  filter(!(cat1 == "GE" & cat2 == "GE")) |>
  mutate(match = paste0(cat1, "-", cat2))

corr_match |>
  filter(cat1 != "GE", cat2 != "GE") |>
  ggplot(aes(r, color = match)) +
  geom_density()
```



```{r}
corr_match |>
  filter(match %in% c("AE-CE", "AE-AE")) |>
  t.test(r ~ match, data = _)
```

```{r}
corr_match |>
  filter(match %in% c("AE-CE", "CE-CE")) |>
  t.test(r ~ match, data = _)
```

```{r}
corr_match |>
  # include only correlations with GE
  filter(cat1 == "GE" | cat2 == "GE") |>
  # omit MDEES subscales
  filter(!(cat1 != "GE" & grepl("MDEES", v1))) |>
  filter(!(cat2 != "GE" & grepl("MDEES", v2))) |>
  ggplot(aes(r, color = match)) +
  geom_density()
```

### Cluster Analysis

```{r}
# Perform hierarchical clustering
cor_matrix_hc <- combined_table %>% 
  filter(quest != "RCS") %>%
  unite(col = "name", quest, subscale) %>%
  left_join(cat_table, by = c("name" = "v")) %>%
  filter(cat != "GE") %>%
  unite(name, cat, name) %>%
  arrange(name) %>%
  pivot_wider(names_from = name, values_from = score) %>%
  select(-session_id) %>%
  #na.omit() %>%
  cor(use = "pairwise.complete.obs")

hc <- hclust(dist(1 - cor_matrix_hc))

# Determine the number of clusters (you can adjust the cutoff as needed)
num_clusters <- 2
clusters <- cutree(hc, num_clusters)

# Print the cluster assignments
print(clusters)
```


```{r}
# Convert the hierarchical clustering object to a dendrogram
dendro <- as.dendrogram(hc)

# Set up the plotting area
par(mar = c(5, 4, 2, 2)) # Adjust margins if needed

# Plot the dendrogram
plot(dendro, main = " Trait Empathy Hierarchical Clustering", 
     xlab = "Index", ylab = "Height", sub = NULL)

# Add color to the dendrogram leaves based on cluster assignment
rect.hclust(hc, k = num_clusters, border = num_clusters:1)

# Add legend
legend("topright", legend = paste("Cluster", 1:num_clusters), fill = 1:num_clusters)
```


### Eigenvalues for Factor Analysis & Parallel analysis

Eigenvalues are used to determine the number of meaningful factors that should be retained in the analysis.Eigenvalues represent the amount of variance that is explained by each factor. Eigenvalues help in deciding how many factors are actually meaningful and should be retained. Kaiser's rule suggests retaining factors with eigenvalues greater than 1. 

An ultra-Heywood case was detected" typically indicates that the factor analysis has identified a factor loading that is very close to 1 or -1, which can suggest potential issues with the model or data.(This is the case due to simulated data being highly correlated)

```{r}
# Parallel Analysis with Dino's 'paran' package. 
nfactors <- paran::paran(cor_matrix_hc, iterations = 5000, 
          centile = 0, quietly = TRUE, 
          status = FALSE, all = TRUE, 
          cfa = FALSE, graph = TRUE)
```


```{r}
# Perform eigenfactor decomposition (Factor Analysis)
eigen_analysis <- fa(cor_matrix_hc, 
                     nfactors = nfactors$Retained, 
                     rotate = "varimax")

# Print factor loadings
print(eigen_analysis$loadings, cutoff = 0.5)
```

